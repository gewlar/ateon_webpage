<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - Ateon</title><link>https://ateon.ch/posts/</link><description>All Posts | Ateon</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 27 Apr 2021 09:03:40 +0200</lastBuildDate><atom:link href="https://ateon.ch/posts/" rel="self" type="application/rss+xml"/><item><title>Some technical information about the Polyring widget</title><link>https://ateon.ch/posts/some-technical-information-about-the-polyring-widgett/</link><pubDate>Tue, 27 Apr 2021 09:03:40 +0200</pubDate><author>gewlar</author><guid>https://ateon.ch/posts/some-technical-information-about-the-polyring-widgett/</guid><description><![CDATA[<p>As those following the news about the Polyring may have read on <a href="https://xyquadrat.ch/2021/04/24/polyring-widget-theming.html" target="_blank" rel="noopener noreffer ">xyquadrat</a>, our widget can now be styled with themes. For those interested about the inner workings I will provide some technical information here.</p>
<p>The component makes heavy use of <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties" target="_blank" rel="noopener noreffer ">css variables</a> alongside the attribute <code>theme</code>, which can be set on the component. Let&rsquo;s walk through the needed setup, which consists of both javascript code and css descriptions.</p>
<h3 id="javascript-setup">Javascript setup</h3>
<p>Fortunately webcomponents already have the functionally to observe attributes. We can simply declare an attribute as observable using a built-in funciton. This allows for hot-switching instead of only loading the attribute once in the beginning.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">static</span> <span class="nx">get</span> <span class="nx">observedAttributes</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="p">[</span><span class="s1">&#39;theme&#39;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Each time the value changes the triggered event can be observed with yet another built-in method. It&rsquo;s usually a good idea to check for the validity of this <code>newVal</code> and if it actually corresponds to our attribute. This is increasingly important if we observe more than just one attribute.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">attributeChangedCallback</span><span class="p">(</span><span class="nx">attrName</span><span class="p">,</span> <span class="nx">oldVal</span><span class="p">,</span> <span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nx">attrName</span> <span class="o">==</span> <span class="s2">&#34;theme&#34;</span> <span class="o">&amp;&amp;</span> <span class="nx">newVal</span> <span class="o">&amp;&amp;</span> <span class="nx">oldVal</span> <span class="o">!==</span> <span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    	<span class="c1">// act on new theme
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Using a lookup table we can then handle predefined themes, which makes it easier to embed. If the given value is not found in the table, we assume that it must be an url to an external file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">themes</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">default</span><span class="o">:</span> <span class="s2">&#34;assets/themes/default.json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">dark</span><span class="o">:</span> <span class="s2">&#34;assets/themes/dark.json&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">themes</span><span class="p">[</span><span class="nx">newVal</span><span class="p">]</span> <span class="o">??</span> <span class="nx">newVal</span><span class="p">;</span>
</span></span></code></pre></div><p>The corresponding internal or external file is then loaded, parsed as json and each css property is updated. You can find an example for such theme file on <a href="https://xyquadrat.ch/polyring/assets/themes/default.json" target="_blank" rel="noopener noreffer ">xyquadrat</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="p">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">val</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    	<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">item</span> <span class="k">in</span> <span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        	<span class="k">this</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">setProperty</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">val</span><span class="p">[</span><span class="nx">item</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">         <span class="p">}</span>              
</span></span><span class="line"><span class="cl">	<span class="p">}).</span><span class="k">catch</span><span class="p">(</span> <span class="nx">val</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    	<span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span> 
</span></span></code></pre></div><h3 id="css-setup">CSS setup</h3>
<p>A <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties" target="_blank" rel="noopener noreffer ">css variable </a> or css custom property can be used with the <code>var</code> function in css. For example for the webring-banner:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">.</span><span class="nc">webring-banner</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">background</span><span class="o">-</span><span class="kc">color</span><span class="p">,</span> <span class="mh">#FFF</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">outer</span><span class="o">-</span><span class="n">border</span><span class="o">-</span><span class="kc">color</span><span class="p">,</span> <span class="mh">#DDD</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Take note that <code>var</code>allows passing a default value in the format: <code>var(--my-variable, default_value)</code>, but it is not necessary. Basically every kind of css parameter can be used in a variable, so you could have dynamic borders or even hide an element in one theme. These variables can also be stacked to allow for both broad and specific control:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">.</span><span class="nc">webring-banner__info</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">border</span><span class="p">:</span> <span class="mi">2</span><span class="kt">px</span> <span class="kc">solid</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">inner</span><span class="o">-</span><span class="n">border</span><span class="o">-</span><span class="kc">color</span><span class="p">,</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">outer</span><span class="o">-</span><span class="n">border</span><span class="o">-</span><span class="kc">color</span><span class="p">,</span> <span class="mh">#DDD</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Additionally if you&rsquo;re using scss and aren&rsquo;t keen on repeating the same var function for each component that uses these properties, you can integrate them with scss variables:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-scss" data-lang="scss"><span class="line"><span class="cl"><span class="nv">$text-color</span><span class="o"> :</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">core-text-color</span><span class="o">,</span> <span class="no">black</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nc">.text</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="na">color</span><span class="o">:</span> <span class="nv">$text-color</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Unfortunately these css custom properties can not be used in scss functions like <code>scale-color</code>. As those are parsed at build time, but the value from a css variables is only present at run time. However css variables can be used in css functions like <code>calc</code>.</p>
<h3 id="conclusion">Conclusion</h3>
<p>Css custom properties allow for relatively easy theme support both to your website as well as webcomponents. Many css frameworks like <a href="https://materializecss.com/" target="_blank" rel="noopener noreffer ">Materialize</a> or <a href="https://getbootstrap.com/" target="_blank" rel="noopener noreffer ">Bootstrap</a> make heavy use of css variables to style elements dynamically.</p>]]></description></item><item><title>Using steganography to send messages hidden in an image</title><link>https://ateon.ch/posts/using-steganography-to-send-messages-hidden-in-an-image/</link><pubDate>Mon, 19 Apr 2021 11:17:40 +0200</pubDate><author>gewlar</author><guid>https://ateon.ch/posts/using-steganography-to-send-messages-hidden-in-an-image/</guid><description><![CDATA[<p>There are multiple ways to send a secret message. The best known and usually used, especially over the internet, is by encrypting the message and later decrypting it.
But it&rsquo;s not the only possibilty. Steganography is the process of hiding information within another carrier medium, fooling everyone else into thinking that the carrier is the only message.</p>
<p>The basic principle ist simple:</p>
<ul>
<li>Add a start and end tag to our message.</li>
<li>Convert the message to a byte string using UTF8.</li>
<li>Overwriting the least significant bits in each pixel with our byte string until the whole message is stored.</li>
</ul>
<p>Let&rsquo;s look at the last step if we want to use the two least significant bits:
As an example we want to store <code>10</code> in a channel that currently stores <code>10100111</code>. First we apply a bit mask with the &lsquo;and&rsquo; operation, then we apply our data with an &lsquo;or&rsquo; operation. This pixel data is then written back into the image.</p>
<pre tabindex="0"><code>	10100111
&amp;	11111100
|	00000010

= 	10100110
</code></pre><p>If only using the least siginificant bits, the difference can not be seen. Even detecting that the image has been changed is difficult if the original can not be used as a reference.</p>
<p>Here are the <a href="https://github.com/gewlar/steganography" target="_blank" rel="noopener noreffer ">source files</a> if you want to try out the application.</p>
<h3 id="further-reading">Further reading:</h3>
<ul>
<li><a href="https://www.garykessler.net/library/steganography.html" target="_blank" rel="noopener noreffer ">https://www.garykessler.net/library/steganography.html</a></li>
</ul>
]]></description></item></channel></rss>