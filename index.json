[{"categories":null,"content":"Randomized Algorithms: Game Tree Evaluation","date":"27.06.2022","objectID":"/posts/game_tree_evaluation/","tags":["algorithms"],"title":"Randomized Algorithms: Game Tree Evaluation","uri":"/posts/game_tree_evaluation/"},{"categories":null,"content":"Imagine you are playing a game of TicTacToe against your friend. Obviously you want to find an ideal strategy to increase your chances of winning. How can you determine your next move? ","date":"27.06.2022","objectID":"/posts/game_tree_evaluation/:0:0","tags":["algorithms"],"title":"Randomized Algorithms: Game Tree Evaluation","uri":"/posts/game_tree_evaluation/"},{"categories":null,"content":"Introduction Let us start by labeling the fields of our grid. Each game is then a series of numbers chosen alternately by you and your opponent. Instead of writing a list of all possible games that could be played, we draw them up as a tree: In this case F 0 stands for marking the field 0. The children of a node now make up all possible next moves from this state of the game. Once the game ends the corresponding branch will stop as well and we have a leaf (labeled by v). The value of those leaves is given by the final state of the game: -1 if your opponent wins, 1 if you win and 0 for a draw. Of course you want to pick your next move such that you may end up at a leave resulting in a 1, while your opponent will try the opposite. As such one player tries to maximize the root value, while the other tries to miminize it. So we are interested in the value of the current root of this tree. ","date":"27.06.2022","objectID":"/posts/game_tree_evaluation/:0:1","tags":["algorithms"],"title":"Randomized Algorithms: Game Tree Evaluation","uri":"/posts/game_tree_evaluation/"},{"categories":null,"content":"Problem Definition Game Tree A game tree is a rooted tree in which internal nodes at an even distance from the root are labeled MIN and internal nodes at odd distance are labeled MAX. Each leaf is associated with a real number, its value. The goal is to determine the value of the root node. Additionally, we are interested in the number of leaves that need to be evaluated to compute this value, any other operations are ignored. For ease of presentation I only consider full binary trees with values in $\\lbrace 0,1 \\rbrace$. Let such a tree be denoted as $T_{2,k}$, with $k$ layers of MAX nodes and $k$ layers of MIN nodes. Hence, the total height of the tree is $2k$ and it has $4^{k}$ leaves. As the values can be interpreted as boolean values, the two types of internal nodes can be regarded as AND respectively OR operations. ","date":"27.06.2022","objectID":"/posts/game_tree_evaluation/:0:2","tags":["algorithms"],"title":"Randomized Algorithms: Game Tree Evaluation","uri":"/posts/game_tree_evaluation/"},{"categories":null,"content":"Deterministic Algorithm A Game Tree can be evaluated by recursively calculating the values of its child nodes. At each step the algorithm has to decide which child to regard first. This choice has to be deterministic for a deterministic algorithm. Short-circuiting may be used to skip the evaluation of the second child node if the first already returned 0 for a MIN node or 1 for a MAX node respectively. But for any deterministic choice for the order of evaluation there exists a worst case such that the algorithm needs to evaluate all $d^{2k}$ leaves. Thus, its worst case number of steps is linear in the number of leaves. ","date":"27.06.2022","objectID":"/posts/game_tree_evaluation/:0:3","tags":["algorithms"],"title":"Randomized Algorithms: Game Tree Evaluation","uri":"/posts/game_tree_evaluation/"},{"categories":null,"content":"Randomized Algorithm The randomized algorithm works almost the same as the deterministic one. But instead of a deterministic order for the evaluation of its children, the algorithm chooses each child node first with equal probability. The expected number of leaves that have to be evaluated can then be reduced to $3^{k}$, which is roughly $n^{0.792}$ with $n$ as the number of leaves. ","date":"27.06.2022","objectID":"/posts/game_tree_evaluation/:0:4","tags":["algorithms"],"title":"Randomized Algorithms: Game Tree Evaluation","uri":"/posts/game_tree_evaluation/"},{"categories":null,"content":"Proof The claimed property is proved by induction over $k$. First note that due to short-circuiting a MIN node evaluating to 0 and a MAX node evaluating to 1 are the same case, with the values flipped. The same is true for a MIN node evaluating to 1 and a MAX node evaluating to 0. First consider the two cases for $k=1$. MIN root 0, k=1 If a MIN root evaluates to 0, at least one of its child MAX nodes must evaluate to 0. With probability $\\frac{1}{2}$ this node is selected first. In turn both its children must evaluate to 0 as well. Thus, picking the correct node results in $2$ leaves being evaluated ($\\red{\\text{red part}}$). \u003c!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"\u003e The other node is picked with probability $\\frac{1}{2}$ as well. As it evaluates to 1, it must have at least on child with value 1. This child is again picked with probability $\\frac{1}{2}$ ($\\blue{\\text{blue part}}$). In that case the blue and red nodes have to be considered for a total of 3. With probability $\\frac{1}{2}$ the wrong node is selected first again ($\\green{\\text{green part}}$), which results in all 4 leaves being evaluated. The expected number of leaves that have to be considered is thus: MIN root 1, k=1 On the flip side, if a MIN node evaluates to 1 both its children must be considered. But the child nodes are MAX nodes and must have at least one child node with value 1 again. With probability $\\frac{1}{2}$ this node is chosen first in each case. \u003c!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"\u003e Once again there is also a $\\frac{1}{2}$ chance for each MAX node to select the wrong leaf first, in which case both its leaves must be evaluated. This results in an expected number of leaves to be considered: As a tree with a MAX root works the same as a MIN node with all values flipped, it holds that the expected number of leaves to be considered $\\mathbb{E}(T_{2,k}) \\leq 3^{k}$ for $k=1$. MIN root 0, $k \u003e 1$ We now assume that our statement $\\mathbb{E}(T_{2,k-1}) \\leq 3^{k-1}$ holds for $k-1$. This case can be thought of and is proved equivalent to the $k=1$ case but each leaf is now another Game Tree $T_{2,k-1}$ instead. Hence, evaluating a leaf instead evaluates $\\leq 3^{k-1}$ actual leaves. Hence, the number of leaves evaluated is given by: MIN root 1, $k \u003e 1$ The same argument for the equivalence of this case to the case MIN node 1, $k = 1$ holds here as well, with the leaves replaced by smaller Game Trees $T_{2,k-1}$ and the expected number of leaves to be evaluated is then: As previously mentioned, the cases for a MAX root can be proved analogously as the MIN cases. ","date":"27.06.2022","objectID":"/posts/game_tree_evaluation/:0:5","tags":["algorithms"],"title":"Randomized Algorithms: Game Tree Evaluation","uri":"/posts/game_tree_evaluation/"},{"categories":null,"content":"Conclusion This concludes that in all cases the expected number of leaves that the randomized algorithm has to evaluate is less than or equal to $3^{k}$. Of course the worst case still has to evaluate all leaves. Using a randomized algorithm it is, thus, possible to achieve an expected number of steps, which is strictly better than the deterministic approach. For games with a lot of decisions like chess, the randomized algorithm is still much to slow to process the whole tree. In such cases a partial tree that only evaluates to a certain depth can be used. The values of the leaves must then be determined by the state at that time. For example giving each chess piece you hold a value depending on its position and subtracting the score of your opponent. References Motwani R. \u0026 Raghavan P. (1995). Randomized Algorithms ","date":"27.06.2022","objectID":"/posts/game_tree_evaluation/:0:6","tags":["algorithms"],"title":"Randomized Algorithms: Game Tree Evaluation","uri":"/posts/game_tree_evaluation/"},{"categories":null,"content":"Some technical information about the Polyring widget","date":"27.04.2021","objectID":"/posts/some-technical-information-about-the-polyring-widgett/","tags":["css","javascript","web component"],"title":"Some technical information about the Polyring widget","uri":"/posts/some-technical-information-about-the-polyring-widgett/"},{"categories":null,"content":"As those following the news about the Polyring may have read on xyquadrat, our widget can now be styled with themes. For those interested about the inner workings I will provide some technical information here. The component makes heavy use of css variables alongside the attribute theme, which can be set on the component. Let’s walk through the needed setup, which consists of both javascript code and css descriptions. ","date":"27.04.2021","objectID":"/posts/some-technical-information-about-the-polyring-widgett/:0:0","tags":["css","javascript","web component"],"title":"Some technical information about the Polyring widget","uri":"/posts/some-technical-information-about-the-polyring-widgett/"},{"categories":null,"content":"Javascript setup Fortunately webcomponents already have the functionally to observe attributes. We can simply declare an attribute as observable using a built-in funciton. This allows for hot-switching instead of only loading the attribute once in the beginning. static get observedAttributes() { return ['theme']; } Each time the value changes the triggered event can be observed with yet another built-in method. It’s usually a good idea to check for the validity of this newVal and if it actually corresponds to our attribute. This is increasingly important if we observe more than just one attribute. attributeChangedCallback(attrName, oldVal, newVal) { if(attrName == \"theme\" \u0026\u0026 newVal \u0026\u0026 oldVal !== newVal) { // act on new theme } } Using a lookup table we can then handle predefined themes, which makes it easier to embed. If the given value is not found in the table, we assume that it must be an url to an external file. themes = { default: \"assets/themes/default.json\", dark: \"assets/themes/dark.json\" } var url = this.themes[newVal] ?? newVal; The corresponding internal or external file is then loaded, parsed as json and each css property is updated. You can find an example for such theme file on xyquadrat. fetch(url).then(response =\u003e response.json()) .then(val =\u003e { for(var item in val) { this.style.setProperty(item, val[item]); } }).catch( val =\u003e { console.error(val); }); ","date":"27.04.2021","objectID":"/posts/some-technical-information-about-the-polyring-widgett/:0:1","tags":["css","javascript","web component"],"title":"Some technical information about the Polyring widget","uri":"/posts/some-technical-information-about-the-polyring-widgett/"},{"categories":null,"content":"CSS setup A css variable or css custom property can be used with the var function in css. For example for the webring-banner: .webring-banner { background-color: var(--background-color, #FFF); border: 1px solid var(--outer-border-color, #DDD); } Take note that varallows passing a default value in the format: var(--my-variable, default_value), but it is not necessary. Basically every kind of css parameter can be used in a variable, so you could have dynamic borders or even hide an element in one theme. These variables can also be stacked to allow for both broad and specific control: .webring-banner__info { border: 2px solid var(--inner-border-color, var(--outer-border-color, #DDD)); } Additionally if you’re using scss and aren’t keen on repeating the same var function for each component that uses these properties, you can integrate them with scss variables: $text-color : var(--core-text-color, black); .text { color: $text-color; } Unfortunately these css custom properties can not be used in scss functions like scale-color. As those are parsed at build time, but the value from a css variables is only present at run time. However css variables can be used in css functions like calc. ","date":"27.04.2021","objectID":"/posts/some-technical-information-about-the-polyring-widgett/:0:2","tags":["css","javascript","web component"],"title":"Some technical information about the Polyring widget","uri":"/posts/some-technical-information-about-the-polyring-widgett/"},{"categories":null,"content":"Conclusion Css custom properties allow for relatively easy theme support both to your website as well as webcomponents. Many css frameworks like Materialize or Bootstrap make heavy use of css variables to style elements dynamically. ","date":"27.04.2021","objectID":"/posts/some-technical-information-about-the-polyring-widgett/:0:3","tags":["css","javascript","web component"],"title":"Some technical information about the Polyring widget","uri":"/posts/some-technical-information-about-the-polyring-widgett/"},{"categories":null,"content":"A brief example of steganography","date":"19.04.2021","objectID":"/posts/using-steganography-to-send-messages-hidden-in-an-image/","tags":null,"title":"Using steganography to send messages hidden in an image","uri":"/posts/using-steganography-to-send-messages-hidden-in-an-image/"},{"categories":null,"content":"There are multiple ways to send a secret message. The best known and usually used, especially over the internet, is by encrypting the message and later decrypting it. But it’s not the only possibilty. Steganography is the process of hiding information within another carrier medium, fooling everyone else into thinking that the carrier is the only message. The basic principle ist simple: Add a start and end tag to our message. Convert the message to a byte string using UTF8. Overwriting the least significant bits in each pixel with our byte string until the whole message is stored. Let’s look at the last step if we want to use the two least significant bits: As an example we want to store 10 in a channel that currently stores 10100111. First we apply a bit mask with the ‘and’ operation, then we apply our data with an ‘or’ operation. This pixel data is then written back into the image. 10100111 \u0026 11111100 | 00000010 = 10100110 If only using the least siginificant bits, the difference can not be seen. Even detecting that the image has been changed is difficult if the original can not be used as a reference. Here are the source files if you want to try out the application. ","date":"19.04.2021","objectID":"/posts/using-steganography-to-send-messages-hidden-in-an-image/:0:0","tags":null,"title":"Using steganography to send messages hidden in an image","uri":"/posts/using-steganography-to-send-messages-hidden-in-an-image/"},{"categories":null,"content":"Further reading: https://www.garykessler.net/library/steganography.html ","date":"19.04.2021","objectID":"/posts/using-steganography-to-send-messages-hidden-in-an-image/:0:1","tags":null,"title":"Using steganography to send messages hidden in an image","uri":"/posts/using-steganography-to-send-messages-hidden-in-an-image/"},{"categories":null,"content":"I’m a computer science student at ETH Zurich. Member of the Polyring webring ","date":"01.01.0001","objectID":"/about/:0:0","tags":null,"title":"","uri":"/about/"}]