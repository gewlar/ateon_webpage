[{"categories":null,"content":"Some technical information about the Polyring widget","date":"27.04.2021","objectID":"/posts/some-technical-information-about-the-polyring-widgett/","tags":["css","javascript","web component"],"title":"Some technical information about the Polyring widget","uri":"/posts/some-technical-information-about-the-polyring-widgett/"},{"categories":null,"content":"As those following the news about the Polyring may have read on xyquadrat, our widget can now be styled with themes. For those interested about the inner workings I will provide some technical information here. The component makes heavy use of css variables alongside the attribute theme, which can be set on the component. Let’s walk through the needed setup, which consists of both javascript code and css descriptions. ","date":"27.04.2021","objectID":"/posts/some-technical-information-about-the-polyring-widgett/:0:0","tags":["css","javascript","web component"],"title":"Some technical information about the Polyring widget","uri":"/posts/some-technical-information-about-the-polyring-widgett/"},{"categories":null,"content":"Javascript setup Fortunately webcomponents already have the functionally to observe attributes. We can simply declare an attribute as observable using a built-in funciton. This allows for hot-switching instead of only loading the attribute once in the beginning. static get observedAttributes() { return ['theme']; } Each time the value changes the triggered event can be observed with yet another built-in method. It’s usually a good idea to check for the validity of this newVal and if it actually corresponds to our attribute. This is increasingly important if we observe more than just one attribute. attributeChangedCallback(attrName, oldVal, newVal) { if(attrName == \"theme\" \u0026\u0026 newVal \u0026\u0026 oldVal !== newVal) { // act on new theme } } Using a lookup table we can then handle predefined themes, which makes it easier to embed. If the given value is not found in the table, we assume that it must be an url to an external file. themes = { default: \"assets/themes/default.json\", dark: \"assets/themes/dark.json\" } var url = this.themes[newVal] ?? newVal; The corresponding internal or external file is then loaded, parsed as json and each css property is updated. You can find an example for such theme file on xyquadrat. fetch(url).then(response =\u003e response.json()) .then(val =\u003e { for(var item in val) { this.style.setProperty(item, val[item]); } }).catch( val =\u003e { console.error(val); }); ","date":"27.04.2021","objectID":"/posts/some-technical-information-about-the-polyring-widgett/:0:1","tags":["css","javascript","web component"],"title":"Some technical information about the Polyring widget","uri":"/posts/some-technical-information-about-the-polyring-widgett/"},{"categories":null,"content":"CSS setup A css variable or css custom property can be used with the var function in css. For example for the webring-banner: .webring-banner { background-color: var(--background-color, #FFF); border: 1px solid var(--outer-border-color, #DDD); } Take note that varallows passing a default value in the format: var(--my-variable, default_value), but it is not necessary. Basically every kind of css parameter can be used in a variable, so you could have dynamic borders or even hide an element in one theme. These variables can also be stacked to allow for both broad and specific control: .webring-banner__info { border: 2px solid var(--inner-border-color, var(--outer-border-color, #DDD)); } Additionally if you’re using scss and aren’t keen on repeating the same var function for each component that uses these properties, you can integrate them with scss variables: $text-color : var(--core-text-color, black); .text { color: $text-color; } Unfortunately these css custom properties can not be used in scss functions like scale-color. As those are parsed at build time, but the value from a css variables is only present at run time. However css variables can be used in css functions like calc. ","date":"27.04.2021","objectID":"/posts/some-technical-information-about-the-polyring-widgett/:0:2","tags":["css","javascript","web component"],"title":"Some technical information about the Polyring widget","uri":"/posts/some-technical-information-about-the-polyring-widgett/"},{"categories":null,"content":"Conclusion Css custom properties allow for relatively easy theme support both to your website as well as webcomponents. Many css frameworks like Materialize or Bootstrap make heavy use of css variables to style elements dynamically. ","date":"27.04.2021","objectID":"/posts/some-technical-information-about-the-polyring-widgett/:0:3","tags":["css","javascript","web component"],"title":"Some technical information about the Polyring widget","uri":"/posts/some-technical-information-about-the-polyring-widgett/"},{"categories":null,"content":"A brief example of steganography","date":"19.04.2021","objectID":"/posts/using-steganography-to-send-messages-hidden-in-an-image/","tags":null,"title":"Using steganography to send messages hidden in an image","uri":"/posts/using-steganography-to-send-messages-hidden-in-an-image/"},{"categories":null,"content":"There are multiple ways to send a secret message. The best known and usually used, especially over the internet, is by encrypting the message and later decrypting it. But it’s not the only possibilty. Steganography is the process of hiding information within another carrier medium, fooling everyone else into thinking that the carrier is the only message. The basic principle ist simple: Add a start and end tag to our message. Convert the message to a byte string using UTF8. Overwriting the least significant bits in each pixel with our byte string until the whole message is stored. Let’s look at the last step if we want to use the two least significant bits: As an example we want to store 10 in a channel that currently stores 10100111. First we apply a bit mask with the ‘and’ operation, then we apply our data with an ‘or’ operation. This pixel data is then written back into the image. 10100111 \u0026 11111100 | 00000010 = 10100110 If only using the least siginificant bits, the difference can not be seen. Even detecting that the image has been changed is difficult if the original can not be used as a reference. Here are the source files if you want to try out the application. ","date":"19.04.2021","objectID":"/posts/using-steganography-to-send-messages-hidden-in-an-image/:0:0","tags":null,"title":"Using steganography to send messages hidden in an image","uri":"/posts/using-steganography-to-send-messages-hidden-in-an-image/"},{"categories":null,"content":"Further reading: https://www.garykessler.net/library/steganography.html ","date":"19.04.2021","objectID":"/posts/using-steganography-to-send-messages-hidden-in-an-image/:0:1","tags":null,"title":"Using steganography to send messages hidden in an image","uri":"/posts/using-steganography-to-send-messages-hidden-in-an-image/"},{"categories":null,"content":"I’m a computer science student at ETH Zurich. Member of the Polyring webring ","date":"01.01.0001","objectID":"/about/:0:0","tags":null,"title":"","uri":"/about/"}]